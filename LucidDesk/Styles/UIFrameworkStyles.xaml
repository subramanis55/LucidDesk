<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:LucidDesk.Styles"
                     xmlns:UserControl="clr-namespace:LucidDesk.UserControls.Common"
                    xmlns:FeaturesFuntionMangerClass="clr-namespace:LucidDesk.FeaturesFuntionMangerClasses"
                    >
    <FeaturesFuntionMangerClass:ColorReductionConverter x:Key="ColorReduction"/>
    <FeaturesFuntionMangerClass:NullToVisibilityConverter x:Key="NullToVisibilityConverter"/>


    <Style x:Key="NormalButton" TargetType="Button">
        <Setter Property="Padding" Value="5"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontFamily" Value="Segoe UI"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border x:Name="BorderBox" 
                        BorderThickness="{TemplateBinding BorderThickness}" 
                        BorderBrush="{TemplateBinding BorderBrush}" 
                        CornerRadius="3" 
                        Background="{TemplateBinding Background}">
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter  Property="Background"  TargetName="BorderBox"
                    Value="{Binding  RelativeSource={RelativeSource Self},Path=Background, Converter={StaticResource ColorReduction},Mode=OneTime}"/>
                        </Trigger>
                        <Trigger Property="IsMouseCaptured" Value="True">
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Tabcontrol" TargetType="TabControl">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TabControl">
                    <ContentPresenter ContentSource="SelectedContent"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CircleBtn" TargetType="Button">
        <Setter Property="Margin" Value="15 0 15 0"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Border CornerRadius="50" Background="{TemplateBinding Background}"    Padding="4" BorderThickness=" 1" BorderBrush="Gainsboro">
                        <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="Gainsboro"/>
            </Trigger>
            <Trigger Property="IsMouseCaptured" Value="true">
                <Setter Property="Background" Value="Gainsboro"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="RadionButton" TargetType="RadioButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <BulletDecorator Background="Transparent" VerticalAlignment="Center">
                        <BulletDecorator.Bullet>
                            <Grid Width="15" Height="15" VerticalAlignment="Center">
                                <Ellipse x:Name="Border" 
                                             Stroke="Black" 
                                             StrokeThickness="1"
                                             Fill="Transparent"/>
                                <Ellipse x:Name="CheckMark" 
                                             Fill="Black"
                                             Width="8" 
                                             Height="8" 
                                             HorizontalAlignment="Center" 
                                             VerticalAlignment="Center"
                                             Visibility="Hidden"/>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter VerticalAlignment="Center"  />
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Stroke" Value="Gray"/>
                            <Setter TargetName="CheckMark" Property="Fill" Value="Gray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBox" TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <BulletDecorator Background="Transparent" VerticalAlignment="Center">
                        <BulletDecorator.Bullet>
                            <Grid Width="18" Height="18" VerticalAlignment="Center">
                                <Border x:Name="Border" 
                                             BorderBrush="Black" 
                                             BorderThickness="1"
                                             Background="Transparent"
                                             Width="18"
                                             Height="18"/>
                                <Path x:Name="CheckMark"
                                             Data="M 0 5 L 5 10 L 15 0"
                                             Stroke="Black"
                                             StrokeThickness="2"
                                             HorizontalAlignment="Center" 
                                             VerticalAlignment="Center"
                                             Visibility="Hidden"/>
                            </Grid>
                        </BulletDecorator.Bullet>
                        <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Left" Margin="25,0,0,0"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Hidden"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="BorderBrush" Value="Gray"/>
                            <Setter TargetName="CheckMark" Property="Stroke" Value="Gray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RoundedImage"  TargetType="{x:Type UserControl:RoundedImage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type UserControl:RoundedImage}" >
                    <Viewbox>
                        <Border   Height="{TemplateBinding ActualHeight}"  Width="{TemplateBinding ActualWidth}"
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent},Path=BorderBrush}"
                                    BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent},Path=BorderThickness}"
                                    CornerRadius="{Binding RelativeSource={RelativeSource TemplatedParent},Path=CornerRadius}">
                            <Border.Background>
                                <ImageBrush Stretch="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Stretch}" 
                                                ImageSource="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Image}">
                                    <ImageBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterX="0.5" CenterY="0.5" 
                                                                ScaleX="{Binding RelativeSource={RelativeSource TemplatedParent},Path= ZoomFactor}" 
                                                                ScaleY="{Binding RelativeSource={RelativeSource TemplatedParent},Path= ZoomFactor}" />
                                            <TranslateTransform X="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Xtranslate}" 
                                                                    Y="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Ytranslate}"/>
                                        </TransformGroup>
                                    </ImageBrush.RelativeTransform>
                                </ImageBrush>
                            </Border.Background>
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RoundedImage2" TargetType="{x:Type UserControl:RoundedImage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type UserControl:RoundedImage}">
                    <Viewbox>
                        <Ellipse Height="100" Width="100">
                            <Ellipse.Fill>
                                <ImageBrush Stretch="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Stretch}" 
                                                ImageSource="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Image}">
                                    <ImageBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterX="0.5" CenterY="0.5" 
                                                                ScaleX="{Binding RelativeSource={RelativeSource TemplatedParent},Path= ZoomFactor}" 
                                                                ScaleY="{Binding RelativeSource={RelativeSource TemplatedParent},Path= ZoomFactor}" />
                                            <TranslateTransform X="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Xtranslate}" 
                                                                    Y="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Ytranslate}"/>
                                        </TransformGroup>
                                    </ImageBrush.RelativeTransform>
                                </ImageBrush>
                            </Ellipse.Fill>
                        </Ellipse>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RoundedImage3" TargetType="{x:Type UserControl:RoundedImage}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type UserControl:RoundedImage}">
                    <Viewbox>
                        <Ellipse Height="100" Width="100" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{TemplateBinding BorderWidth}">
                            <Ellipse.Fill>
                                <ImageBrush Stretch="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Stretch}" ImageSource="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Image}" >
                                    <ImageBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ZoomFactor}" ScaleY="{Binding RelativeSource={RelativeSource TemplatedParent},Path=ZoomFactor}" />
                                            <TranslateTransform X="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Xtranslate}" Y="{Binding RelativeSource={RelativeSource TemplatedParent},Path=Ytranslate}"/>
                                        </TransformGroup>
                                    </ImageBrush.RelativeTransform>
                                </ImageBrush>
                            </Ellipse.Fill>
                        </Ellipse>
                    </Viewbox>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--ComboBox-->
    <Style x:Key="ComboBoxToggleButton" TargetType="ToggleButton" >
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Border >
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="25"/>
                            </Grid.ColumnDefinitions>
                            <Border Name="Border" Grid.Column="0" Padding="15 0" Grid.ColumnSpan="2"  CornerRadius="3" BorderThickness="2" Background="{Binding RelativeSource={RelativeSource AncestorType=ComboBox},Path=Background}" BorderBrush="{Binding RelativeSource={RelativeSource AncestorType=ComboBox},Path=BorderBrush}"   >
                            </Border>
                            <Path Name="Arrow" Grid.Column="1" Fill="{TemplateBinding BorderBrush}" HorizontalAlignment="Center" VerticalAlignment="Center"   Data="M 0 0 L 4 4 L 8 0 Z">
                            </Path>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource MainThemeColor}"/>
                            <Setter TargetName="Border"  Property="BorderBrush" Value="{DynamicResource MainThemeColor}"/>
                            <Setter TargetName="Border"  Property="BorderThickness" Value="{DynamicResource BorderThickness}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource MainThemeColor}"/>
                            <Setter TargetName="Border"  Property="BorderThickness" Value="{DynamicResource BorderThickness}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource MainThemeColor}"/>
                            <Setter TargetName="Arrow" Property="Fill" Value="{DynamicResource MainThemeColor}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <ControlTemplate x:Key="ComboxTextBox"  TargetType="{x:Type TextBox}">
        <Border x:Name="PART_ContentHost1"  Focusable="False" Visibility="Hidden" Background="Transparent">
        </Border>
    </ControlTemplate>

    <Style x:Key="CustomComboBoxItem" TargetType="ComboBoxItem">
        <Setter Property="Background" Value="White"/>
        <Setter Property="Foreground" Value="#080511"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border Name="Border" Background="{TemplateBinding Background}"   BorderBrush="Gray" CornerRadius="2"  BorderThickness="0">
                        <ContentPresenter 
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        Margin="5 2"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter  Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=Background,Converter={StaticResource ColorReduction},Mode=OneTime}"/>
                            <Setter Property="Foreground" Value="Black"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter  Property="Background" Value="#F6F9F9"/>
                        </Trigger>
                        <!--<Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="Border" Property="Background" Value="LightGray"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="Gray"/>

                        </Trigger>-->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CustomComboBox" TargetType="ComboBox">
        <Setter Property="FontFamily" Value="Segoe"></Setter>
        <Setter Property="FontSize" Value="16"/>
        <Setter Property="Foreground" Value="Gray"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource CustomComboBoxItem}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid Background="{TemplateBinding Background}">
                        <ToggleButton Name="ToggleButton" Style="{StaticResource ComboBoxToggleButton}" Focusable="False" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                        </ToggleButton>
                        <ContentPresenter Name="ContentSite" IsHitTestVisible="False" Margin="15,3,10,3" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"></ContentPresenter>
                        <TextBox Name="ComboBoxTextBox" HorizontalAlignment="Left" VerticalAlignment="Center" Focusable="True" IsReadOnly="{TemplateBinding IsReadOnly}" Template="{StaticResource ComboxTextBox}" Visibility="Hidden"></TextBox>
                        <Popup Name="Popup" PopupAnimation="Slide" Focusable="False" AllowsTransparency="True" Margin="3" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}">
                            <Grid Name="DropDown" MinWidth="{TemplateBinding ActualWidth}"  MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border Name="DropDownBorder" CornerRadius="3"  BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"  Background="{TemplateBinding Background}">
                                </Border>
                                <ScrollViewer Margin="4,6,4,6">
                                    <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained"></StackPanel>
                                </ScrollViewer>
                            </Grid>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="DropDownBorder" Property="MinHeight" Value="95"/>
                        </Trigger>
                        <Trigger Property="IsGrouping" Value="True">
                            <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0 5 0 0"/>
                        </Trigger>
                        <Trigger SourceName="Popup" Property="AllowsTransparency" Value="True">
                            <Setter TargetName="DropDownBorder" Property="CornerRadius" Value="3"/>
                            <Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ToggleButton Template for ComboBox--><!--
    <ControlTemplate x:Key="ComboBoxToggleButton"
					 TargetType="ToggleButton">
        <Border Name="Border"
				Background="{TemplateBinding Background}"
				BorderBrush="{TemplateBinding Foreground}"
				BorderThickness="2"
				CornerRadius="5,5,5,5">
            <Grid x:Name="Grid"
				  Background="Transparent"
				  Margin="0.5">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition />
                    <ColumnDefinition Width="15" />
                </Grid.ColumnDefinitions>
                <ContentPresenter Grid.Column="0"
								  VerticalAlignment="Center"
								  HorizontalAlignment="Left"
								  Margin="4,0,0,0"
								  Content="{TemplateBinding Content}"
								  ContentTemplate="{TemplateBinding ContentTemplate}"
								  TextElement.Foreground="{TemplateBinding Foreground}" />

                <Path Grid.Column="1"
					  HorizontalAlignment="Center"
					  VerticalAlignment="Center"
					  Name="Path"
					  Data="M11.125 16.313l7.688-7.688 3.594 3.719-11.094 11.063-11.313-11.313 3.5-3.531z"
					  Fill="{TemplateBinding Foreground}"
					  Height="5"
					  Margin="0,0,5,0"
					  Stretch="Fill" />
                <Grid.Style>
                    <Style TargetType="Grid">
                        <Setter Property="Cursor"
								Value="Hand" />
                    </Style>
                </Grid.Style>
            </Grid>
            <Border.Style>
                <Style TargetType="Border">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource AncestorType=ToggleButton, AncestorLevel=1}}"
									 Value="True">
                            --><!--<DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <local:CornerRadiusAnimation Storyboard.TargetProperty="(Border.CornerRadius)"
																	 From="5,5,5,5"
																	 To="5,5,0,0"
																	 Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <local:CornerRadiusAnimation Storyboard.TargetProperty="(Border.CornerRadius)"
																	 From="5,5,0,0"
																	 To="5,5,5,5"
																	 Duration="0:0:0.1" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>--><!--
                        </DataTrigger>

                    </Style.Triggers>
                </Style>
            </Border.Style>
        </Border>

    </ControlTemplate>

    --><!-- ComboBox Style with ControlTemplate and Color Animation --><!--
    <ControlTemplate x:Key="ComboBoxTemplate"
					 TargetType="ComboBox">
        <Grid Name="Grid"
			  MinWidth="150">

            <ToggleButton Name="ToggleButton"
						  Foreground="{TemplateBinding Foreground}"
						  Background="{TemplateBinding Background}"
						  Template="{StaticResource ComboBoxToggleButton}"
						  Grid.Column="2"
						  Focusable="False"
						  IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
						  ClickMode="Press" />

            <ContentPresenter Name="ContentSite"
							  IsHitTestVisible="False"
							  Content="{TemplateBinding SelectionBoxItem}"
							  ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
							  ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
							  Margin="3,3,23,3"
							  VerticalAlignment="Center"
							  HorizontalAlignment="Left"
							  TextElement.Foreground="{TemplateBinding Foreground}" />

            <TextBlock HorizontalAlignment="Left"
					   VerticalAlignment="Center"
					   Padding="5"
					   Foreground="{TemplateBinding Foreground}"
					   Name="TextBlock"
					   Text="{TemplateBinding Text}"
					   Visibility="{Binding ElementName=ContentSite, Path=Content, Converter={StaticResource NullToVisibilityConverter}}" />

            <Popup Name="Popup"
				   Placement="Bottom"
				   IsOpen="{TemplateBinding IsDropDownOpen}"
				   AllowsTransparency="True"
				   Focusable="False"
				   PopupAnimation="Fade">
                <Grid Name="DropDown"
					  MinWidth="{TemplateBinding ActualWidth}"
					  MaxHeight="400">
                    <Border Name="DropDownBorder"
							Background="{TemplateBinding Background}"
							BorderBrush="{TemplateBinding Foreground}"
							BorderThickness="2"
							CornerRadius="0,0,5,5">
                   
                    </Border>
                </Grid>
            </Popup>
        </Grid>
    </ControlTemplate>

    --><!--ComboBoxItem Style--><!--
    <Style TargetType="ComboBoxItem"
		   x:Key="ComboBoxItemStyle">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBoxItem">
                    <Border x:Name="MyBorder"
							Padding="5"
							Margin="2,2,10,2"
							CornerRadius="5"
							BorderThickness="1"
							BorderBrush="{TemplateBinding Foreground}"
							Background="Transparent">
                        <ContentPresenter VerticalAlignment="Center"
										  HorizontalAlignment="Stretch"
										  x:Name="ContentPresenter"
										  TextElement.Foreground="{TemplateBinding Foreground}" />

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver"
								 Value="True">
                            <Setter Property="Cursor"
									Value="Hand" />
                            <Setter Property="Background"
									TargetName="MyBorder"
									Value="{Binding RelativeSource={RelativeSource Self}, Path=BorderBrush}" />
                            <Setter Property="TextElement.Foreground"
									TargetName="ContentPresenter"
									Value="{Binding RelativeSource={RelativeSource AncestorType=Border, AncestorLevel=2}, Path=Background}" />
                        </Trigger>

                        <Trigger Property="IsSelected"
								 Value="True">
                            <Setter TargetName="MyBorder"
									Property="Background"
									Value="{Binding RelativeSource={RelativeSource Self}, Path=BorderBrush}" />
                            <Setter TargetName="ContentPresenter"
									Property="TextElement.Foreground"
									Value="{Binding RelativeSource={RelativeSource AncestorType=Border, AncestorLevel=2}, Path=Background}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ComboBoxStyle" TargetType="ComboBox">
		<Setter Property="Template"
				Value="{StaticResource ComboBoxTemplate}" />
	</Style>-->

    <!-- Custom MenuItem Style -->
    <Style x:Key="CustomContextMenu" TargetType="ContextMenu">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Background" Value="White"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="true" />
        <Setter Property="HasDropShadow" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border Background="{TemplateBinding Background}" CornerRadius="2" BorderThickness="1" BorderBrush="Gainsboro">
                        <ItemsPresenter Margin="2"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Custom MenuItem Style -->
    <Style x:Key="ContextMenuItem" TargetType="MenuItem">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Background" Value="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu},Path=Background}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Padding" Value="5,3"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="FontWeight" Value="SemiBold"/>
        <Setter Property="MinHeight" Value="32"/>
        <Setter Property="MinWidth" Value="150"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                        <Grid>
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Left" ContentSource="Header" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{Binding RelativeSource={RelativeSource Self},Path=Background,Converter={StaticResource ColorReduction},Mode=OneTime}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MenuItemStyle" TargetType="MenuItem">
        <Setter Property="Background" Value="Transparent" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="#FAF6F9"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style TargetType="ToolTip">
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Background" Value="white"/>
        <Setter Property="BorderBrush" Value="Gainsboro"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="ToolTip">
                    <Border CornerRadius="3" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                        <Border Padding="6 2">
                            <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center"/>
                        </Border>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>